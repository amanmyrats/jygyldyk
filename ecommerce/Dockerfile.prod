###########
# BUILDER #
###########

# pull official base image
FROM ubuntu:20.04

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN adduser app && usermod -a -G app app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/static
RUN mkdir $APP_HOME/media
WORKDIR $APP_HOME


# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV LANG C.UTF-8
ENV DEBIAN_FRONTEND=noninteractive 

# install psycopg2 dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
        # tzdata \
        # libopencv-dev \ 
        # build-essential \
        # libssl-dev \
        # libpq-dev \
        # libcurl4-gnutls-dev \
        # libexpat1-dev \
        gettext \
        # unzip \
        python3-setuptools \
        python3-pip \
        python3-dev \
        # python3-venv \
        # git \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
    
# lint
RUN pip3 install --upgrade pip

# copy project
COPY . $APP_HOME

# install dependencies
COPY ./requirements.txt .
RUN pip3 install -r requirements.txt


#########
# FINAL #
#########

# pull official base image
# FROM ubuntu:20.04



# install dependencies
# RUN apt-get update && apt-get install python3-pip -y
# COPY --from=builder /usr/src/app/wheels /wheels
# COPY --from=builder /usr/src/app/requirements.txt .
# RUN pip3 install --no-cache /wheels/*

# copy entrypoint.prod.sh
COPY ./entrypoint.prod.sh .
RUN sed -i 's/\r$//g'  $APP_HOME/entrypoint.prod.sh
RUN chmod +x  $APP_HOME/entrypoint.prod.sh


# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run entrypoint.prod.sh
ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]

CMD python manage.py collectstatic --noinput